import tarfile
import json
import os
import numpy as np
import cv2
from PIL import Image
import io
import base64
import zlib

# Path where the file generated by Supervisely will be downloaded, the container must be able to access this path  
DATA_DIR = '/home/data/supervisely_download'
# Name of the downloaded file
TAR_PATH = os.path.join(DATA_DIR, '23_21_13.578.tar')
ANN_DIR = os.path.join(DATA_DIR, 'image_data', 'ann')
GT_IMAGE_DIR = os.path.join(DATA_DIR, 'gt_image')

def unzip():
    with tarfile.open(TAR_PATH) as tar:
        tar.extractall(path=DATA_DIR)

def generateMask():
    if not os.path.exists(GT_IMAGE_DIR):
        os.makedirs(GT_IMAGE_DIR)

    for ann_file in os.listdir(ANN_DIR):
        if ann_file.endswith('.json'):
            json_path = os.path.join(ANN_DIR, ann_file)
            
            with open(json_path, 'r') as file:
                ann_data = json.load(file)
            
            image_size = ann_data['size']
            mask = np.zeros((image_size['height'], image_size['width']), dtype=np.uint8)
            
            for obj in ann_data['objects']:
                if obj['geometryType'] == 'bitmap' and obj['classTitle'].lower() == 'road':
                    bitmap_data = obj['bitmap']['data']
                    origin = obj['bitmap']['origin']
                    
                    decoded_data = base64.b64decode(bitmap_data)
                    
                    try:
                        decompressed_data = zlib.decompress(decoded_data)
                    except zlib.error as e:
                        print(f"Error al descomprimir los datos: {e}")
                        continue
                    
                    try:
                        img = Image.open(io.BytesIO(decompressed_data))
                        img_np = np.array(img)
                        mask[origin[1]:origin[1]+img_np.shape[0], origin[0]:origin[0]+img_np.shape[1]] = img_np
                    except IOError as e:
                        print(f"Error al abrir los datos de la imagen: {e}")
                        continue
            
            mask = np.where(mask > 0, 255, 0).astype(np.uint8)
            
            base_filename = os.path.splitext(ann_file)[0]
            if base_filename.endswith('.png'):  
                base_filename = base_filename[:-4]

            mask_path = os.path.join(GT_IMAGE_DIR, base_filename + '_fillcolor.png')
            cv2.imwrite(mask_path, mask)

def main():
    unzip()
    generateMask()

if __name__ == "__main__":
    main()
